# Función para multiplicar matrices de 2x2
def multiplicar_matrices(A, B):
    C = [[0, 0], [0, 0]]  # Inicializamos la matriz C de la multiplicación
    # Blucles para recorrer las filas y columnas de las matrices C, A y B para la multiplicación de matrices
    for i in range(2): # Recorre las filas de la matriz C y las matrices A y B
        for j in range(2): # Recorre las columnas de la matriz C y las matrices A y B
            for k in range(2): # Multiplica los elementos de las matrices A y B
                C[i][j] += (A[i][k] * B[k][j]) # Realiza la suma acumulativa de la multiplicación de las matrices A y B
    return C # Retorna el valor de la matriz C (multiplicación)

# Función para calcular el e-ésimo número de Fibonacci
def fibo(n):
    if n <= 1: # Verifica si el valor de n es menor o igual a 1
        return n # Si es así retorna el valor de n
    else: # Si no
        A = [[0, 1], [1, 1]] # Se asigna el valor de la Matriz de Fibonacci en la variable A
        resultado = expo(A, n - 1) # Realiza la llamada de la función expo con los parámetros de la matriz A y el valor de n-1 y guarda el resultado en la variable resultado
        return resultado[1][1] # Al finalizar las operaciones devuelve el valor de la matriz identidad en la posición [1][1]

# Función de exponenciación rápida (Divide y Vencerás)
def expo(A, n):
    if n == 0: # Verifica si el valor de n es igual a 0
        return [[1, 0], [0, 1]] # Si es así retorna Matriz identidad
    elif n % 2 == 0: # Verifica si el residuo de n / 2 es igual a 0
        mitadn = expo(A, n // 2) # si es así entonces realiza la llamada de la función expo con los parámetros de la matriz A el valor de n / 2
        return multiplicar_matrices(mitadn, mitadn) # Devuelve el valor de retorno de la llamada a la función de multiplicar la matriz de mitadn * mitadn
    else: # Si n no es par entonces (impar)
        mitadn = expo(A, (n - 1) // 2) # Realiza la llamada de la función expo con los parámetros de la matriz A el valor de (n - 1) / 2
        D = multiplicar_matrices(mitadn, mitadn) # Realiza la llamada a la función de multiplicar la matriz de mitadn * mitadn y guarda el resultado en la variable D (matriz)
        return multiplicar_matrices(A, D) # Retorna el resultado de la llamada de la función multiplicar matrices de la matriz A y D
